/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	"/": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["AppController_getHello"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/learning": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get all learning records */
		get: operations["LearningController_getAll"];
		/** Update learning */
		put: operations["LearningController_update"];
		/** Create learning */
		post: operations["LearningController_create"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/learning/{id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get learning by id */
		get: operations["LearningController_getById"];
		put?: never;
		post?: never;
		/** Delete learning */
		delete: operations["LearningController_remove"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/topic": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get all topics */
		get: operations["TopicController_getAll"];
		/** Update topic */
		put: operations["TopicController_update"];
		/** Create topic */
		post: operations["TopicController_create"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/topic/{id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get topic by id */
		get: operations["TopicController_getById"];
		put?: never;
		post?: never;
		/** Delete topic */
		delete: operations["TopicController_remove"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/training": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get all training records */
		get: operations["TrainingController_getAll"];
		/** Update training */
		put: operations["TrainingController_update"];
		/** Create training */
		post: operations["TrainingController_create"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/training/{id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get training by id */
		get: operations["TrainingController_getById"];
		put?: never;
		post?: never;
		/** Delete training */
		delete: operations["TrainingController_remove"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/user": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get all users */
		get: operations["UserController_getAll"];
		/** Update user */
		put: operations["UserController_update"];
		/** Create user */
		post: operations["UserController_create"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/user/{id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get user by id */
		get: operations["UserController_getById"];
		put?: never;
		post?: never;
		/** Delete user */
		delete: operations["UserController_remove"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/vocabcatalog": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get all vocab catalogs */
		get: operations["VocabCatalogController_getAll"];
		/** Update vocab catalog */
		put: operations["VocabCatalogController_update"];
		/** Create vocab catalog */
		post: operations["VocabCatalogController_create"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/vocabcatalog/{id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get vocab catalog by id */
		get: operations["VocabCatalogController_getById"];
		put?: never;
		post?: never;
		/** Delete vocab catalog */
		delete: operations["VocabCatalogController_remove"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/word": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get all words */
		get: operations["WordController_getAll"];
		/** Update word */
		put: operations["WordController_update"];
		/** Create word */
		post: operations["WordController_create"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/word/{id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get word by id */
		get: operations["WordController_getById"];
		put?: never;
		post?: never;
		/** Delete word */
		delete: operations["WordController_remove"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/words-translation/{id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get words translation by id */
		get: operations["WordTranslationController_getById"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/words-translation": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Create words translation */
		post: operations["WordTranslationController_create"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/auth/signin": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post: operations["AuthController_signin"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/auth/signup": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post: operations["AuthController_signup"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/auth/reset-password": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["AuthController_sendResetPasswordEmail"];
		put: operations["AuthController_resetPassword"];
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/auth/verify-email": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: operations["AuthController_sendVerificationEmail"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/auth/refresh-token": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post: operations["AuthController_refreshToken"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
}
export type webhooks = Record<string, never>;
export interface components {
	schemas: {
		LearningDto: {
			/** Format: int64 */
			id: number;
			/**
			 * Format: date-time
			 * @description timestamp with time zone
			 */
			created_at: string;
			/** Format: int64 */
			user: string;
			/** Format: int64 */
			word: string;
			score: number;
			/**
			 * Format: date-time
			 * @description timestamp without time zone
			 */
			last_review: string;
			/** Format: int64 */
			training: string;
			/** Format: int64 */
			translation: string;
		};
		GetLearningResponseDto: {
			/** @example 100 */
			total: number;
			/** @example 0 */
			offset: number;
			/** @example 10 */
			limit: number;
			/** @description List of learning items */
			items: components["schemas"]["LearningDto"][];
		};
		PostLearningRequestDto: {
			/**
			 * Format: date-time
			 * @description timestamp with time zone
			 */
			created_at: string;
			/** Format: int64 */
			user: string;
			/** Format: int64 */
			word: string;
			score: number;
			/**
			 * Format: date-time
			 * @description timestamp without time zone
			 */
			last_review: string;
			/** Format: int64 */
			training: string;
			/** Format: int64 */
			translation: string;
		};
		PostLearningResponseDto: {
			/** Format: int64 */
			id: number;
			/**
			 * Format: date-time
			 * @description timestamp with time zone
			 */
			created_at: string;
			/** Format: int64 */
			user: string;
			/** Format: int64 */
			word: string;
			score: number;
			/**
			 * Format: date-time
			 * @description timestamp without time zone
			 */
			last_review: string;
			/** Format: int64 */
			training: string;
			/** Format: int64 */
			translation: string;
		};
		PutLearningRequestDto: {
			/** Format: int64 */
			id?: string;
			/**
			 * Format: date-time
			 * @description timestamp with time zone
			 */
			created_at?: string;
			/** Format: int64 */
			user?: string;
			/** Format: int64 */
			word?: string;
			score?: number;
			/**
			 * Format: date-time
			 * @description timestamp without time zone
			 */
			last_review?: string;
			/** Format: int64 */
			training?: string;
			/** Format: int64 */
			translation?: string;
		};
		PutLearningResponseDto: {
			/** Format: int64 */
			id: number;
			/**
			 * Format: date-time
			 * @description timestamp with time zone
			 */
			created_at: string;
			/** Format: int64 */
			user: string;
			/** Format: int64 */
			word: string;
			score: number;
			/**
			 * Format: date-time
			 * @description timestamp without time zone
			 */
			last_review: string;
			/** Format: int64 */
			training: string;
			/** Format: int64 */
			translation: string;
		};
		DeleteLearningResponseDto: {
			/** Format: int64 */
			id: number;
		};
		TopicDto: {
			/** Format: int64 */
			id: number;
			/** Format: date-time */
			created_at: string;
			title: string;
			description: string;
			/** Format: int64 */
			catalog: string;
			image?: string | null;
		};
		GetTopicResponseDto: {
			/** @example 100 */
			total: number;
			/** @example 0 */
			offset: number;
			/** @example 10 */
			limit: number;
			/** @description List of topics */
			items: components["schemas"]["TopicDto"][];
		};
		PostTopicRequestDto: {
			/** Format: date-time */
			created_at: string;
			title: string;
			description: string;
			/** Format: int64 */
			catalog: string;
			image?: string | null;
		};
		PostTopicResponseDto: {
			/** Format: int64 */
			id: number;
			/** Format: date-time */
			created_at: string;
			title: string;
			description: string;
			/** Format: int64 */
			catalog: string;
			image?: string | null;
		};
		PutTopicRequestDto: {
			/** Format: int64 */
			id?: number;
			/** Format: date-time */
			created_at?: string;
			title?: string;
			description?: string;
			/** Format: int64 */
			catalog?: string;
			image?: string | null;
		};
		PutTopicResponseDto: {
			/** Format: int64 */
			id: number;
			/** Format: date-time */
			created_at: string;
			title: string;
			description: string;
			/** Format: int64 */
			catalog: string;
			image?: string | null;
		};
		DeleteTopicResponseDto: {
			/** Format: int64 */
			id: number;
		};
		TrainingDto: {
			/** Format: int64 */
			id: number;
			/** Format: date-time */
			created_at: string;
			name: string;
			title: string;
			description: string;
			image: string;
			score: number;
		};
		GetTrainingResponseDto: {
			/** @example 100 */
			total: number;
			/** @example 0 */
			offset: number;
			/** @example 10 */
			limit: number;
			/** @description List of training items */
			items: components["schemas"]["TrainingDto"][];
		};
		PostTrainingRequestDto: {
			/** Format: date-time */
			created_at: string;
			name: string;
			title: string;
			description: string;
			image: string;
			score: number;
		};
		PostTrainingResponseDto: {
			/** Format: int64 */
			id: number;
			/** Format: date-time */
			created_at: string;
			name: string;
			title: string;
			description: string;
			image: string;
			score: number;
		};
		PutTrainingRequestDto: {
			/** Format: int64 */
			id?: number;
			/** Format: date-time */
			created_at?: string;
			name?: string;
			title?: string;
			description?: string;
			image?: string;
			score?: number;
		};
		PutTrainingResponseDto: {
			/** Format: int64 */
			id: number;
			/** Format: date-time */
			created_at: string;
			name: string;
			title: string;
			description: string;
			image: string;
			score: number;
		};
		DeleteTrainingResponseDto: {
			/** Format: int64 */
			id: number;
		};
		UserDto: {
			/** Format: int64 */
			id: number;
			/** Format: date-time */
			created_at: string;
			email: string;
			name: string;
		};
		GetUserResponseDto: {
			/** @example 100 */
			total: number;
			/** @example 0 */
			offset: number;
			/** @example 10 */
			limit: number;
			/** @description List of users */
			items: components["schemas"]["UserDto"][];
		};
		PostUserRequestDto: {
			/** Format: date-time */
			created_at: string;
			email: string;
			name: string;
		};
		PostUserResponseDto: {
			/** Format: int64 */
			id: number;
			/** Format: date-time */
			created_at: string;
			email: string;
			name: string;
		};
		PutUserRequestDto: {
			/** Format: int64 */
			id?: number;
			/** Format: date-time */
			created_at?: string;
			email?: string;
			name?: string;
		};
		PutUserResponseDto: {
			/** Format: int64 */
			id: number;
			/** Format: date-time */
			created_at: string;
			email: string;
			name: string;
		};
		DeleteUserResponseDto: {
			/** Format: int64 */
			id: number;
		};
		VocabCatalogDto: {
			/** Format: int64 */
			id: number;
			/** Format: date-time */
			created_at: string;
			/** Format: int64 */
			owner: number;
			title: string;
			description?: string | null;
			language: string;
			image?: string | null;
		};
		GetVocabCatalogResponseDto: {
			/** @example 100 */
			total: number;
			/** @example 0 */
			offset: number;
			/** @example 10 */
			limit: number;
			/** @description List of vocabulary catalogs */
			items: components["schemas"]["VocabCatalogDto"][];
		};
		PostVocabCatalogRequestDto: {
			/** Format: int64 */
			owner: number;
			title: string;
			description?: string | null;
			language: string;
			image?: string | null;
		};
		PostVocabCatalogResponseDto: {
			/** Format: int64 */
			id: number;
			/** Format: date-time */
			created_at: string;
			/** Format: int64 */
			owner: number;
			title: string;
			description?: string | null;
			language: string;
			image?: string | null;
		};
		PutVocabCatalogRequestDto: {
			/** Format: int64 */
			id?: number;
			/** Format: date-time */
			created_at?: string;
			/** Format: int64 */
			owner?: number;
			title?: string;
			description?: string | null;
			language?: string;
			image?: string | null;
		};
		PutVocabCatalogResponseDto: {
			/** Format: int64 */
			id: number;
			/** Format: date-time */
			created_at: string;
			/** Format: int64 */
			owner: number;
			title: string;
			description?: string | null;
			language: string;
			image?: string | null;
		};
		DeleteVocabCatalogResponseDto: {
			/** Format: int64 */
			id: number;
		};
		WordDataDto: {
			/** Format: int64 */
			id: number;
			/** Format: date-time */
			created_at: string;
			/** Format: int64 */
			topic: string;
			/** Format: int64 */
			catalog: string;
			language: string;
			topicData: components["schemas"]["TopicDto"];
			catalogData: components["schemas"]["VocabCatalogDto"];
		};
		GetWordResponseDto: {
			/** @example 100 */
			total: number;
			/** @example 0 */
			offset: number;
			/** @example 10 */
			limit: number;
			/** @description List of words */
			items: components["schemas"]["WordDataDto"][];
		};
		PostWordRequestDto: {
			/** Format: date-time */
			created_at: string;
			/** Format: int64 */
			topic: string;
			/** Format: int64 */
			catalog: string;
			language: string;
		};
		PostWordResponseDto: {
			/** Format: int64 */
			id: number;
			/** Format: date-time */
			created_at: string;
			/** Format: int64 */
			topic: string;
			/** Format: int64 */
			catalog: string;
			language: string;
		};
		PutWordRequestDto: {
			/** Format: int64 */
			id?: number;
			/** Format: date-time */
			created_at?: string;
			/** Format: int64 */
			topic?: string;
			/** Format: int64 */
			catalog?: string;
			language?: string;
		};
		PutWordResponseDto: {
			/** Format: int64 */
			id: number;
			/** Format: date-time */
			created_at: string;
			/** Format: int64 */
			topic: string;
			/** Format: int64 */
			catalog: string;
			language: string;
		};
		DeleteWordResponseDto: {
			/** Format: int64 */
			id: number;
		};
		WordTranslationDto: {
			/** Format: int64 */
			id: number;
			/** Format: date-time */
			created_at: string;
			/** Format: int64 */
			word: string;
			translation: string;
			language: string;
		};
		GetWordTranslationResponseDto: {
			/** @example 100 */
			total: number;
			/** @example 0 */
			offset: number;
			/** @example 10 */
			limit: number;
			/** @description List of word translations */
			items: components["schemas"]["WordTranslationDto"][];
		};
		PostWordTranslationRequestDto: {
			/** Format: date-time */
			created_at: string;
			/** Format: int64 */
			word: string;
			translation: string;
			language: string;
		};
		PostWordTranslationResponseDto: {
			/** Format: int64 */
			id: number;
			/** Format: date-time */
			created_at: string;
			/** Format: int64 */
			word: string;
			translation: string;
			language: string;
		};
		PostSignInRequestDto: {
			email: string;
			/**
			 * @description User password
			 * @example Strong#Password123
			 */
			password: string;
		};
		PostSignUpRequestDto: {
			email: string;
			name: string;
			/**
			 * @description User password
			 * @example Strong#Password123
			 */
			password: string;
		};
		PutResetPasswordRequestDto: {
			/**
			 * @description User password
			 * @example Strong#Password123
			 */
			new_password: string;
			/** @description Password reset token */
			token: string;
		};
		PostRefreshTokenRequestDto: {
			/** @description Refresh token */
			refresh_token: string;
		};
	};
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
	AppController_getHello: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	LearningController_getAll: {
		parameters: {
			query: {
				offset: number;
				limit: number;
				id?: number;
				/** @description timestamp with time zone */
				created_at?: string;
				user?: string;
				word?: string;
				score?: number;
				/** @description timestamp without time zone */
				last_review?: string;
				training?: string;
				translation?: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetLearningResponseDto"];
				};
			};
			/** @description Invalid param */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	LearningController_update: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["PutLearningRequestDto"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PutLearningResponseDto"];
				};
			};
			/** @description Invalid data */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Learning not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	LearningController_create: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["PostLearningRequestDto"];
			};
		};
		responses: {
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PostLearningResponseDto"];
				};
			};
		};
	};
	LearningController_getById: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				id: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetLearningResponseDto"];
				};
			};
			/** @description Learning not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	LearningController_remove: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["DeleteLearningResponseDto"];
				};
			};
		};
	};
	TopicController_getAll: {
		parameters: {
			query: {
				offset: number;
				limit: number;
				id?: number;
				created_at?: string;
				title?: string;
				description?: string;
				catalog?: string;
				image?: string | null;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetTopicResponseDto"];
				};
			};
			/** @description Invalid param */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	TopicController_update: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["PutTopicRequestDto"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PutTopicResponseDto"];
				};
			};
			/** @description Invalid data */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Topic not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	TopicController_create: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["PostTopicRequestDto"];
			};
		};
		responses: {
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PostTopicResponseDto"];
				};
			};
		};
	};
	TopicController_getById: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				id: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetTopicResponseDto"];
				};
			};
			/** @description Topic not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	TopicController_remove: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["DeleteTopicResponseDto"];
				};
			};
		};
	};
	TrainingController_getAll: {
		parameters: {
			query: {
				offset: number;
				limit: number;
				id?: number;
				created_at?: string;
				name?: string;
				title?: string;
				description?: string;
				image?: string;
				score?: number;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetTrainingResponseDto"];
				};
			};
			/** @description Invalid param */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	TrainingController_update: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["PutTrainingRequestDto"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PutTrainingResponseDto"];
				};
			};
			/** @description Invalid data */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Training not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	TrainingController_create: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["PostTrainingRequestDto"];
			};
		};
		responses: {
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PostTrainingResponseDto"];
				};
			};
		};
	};
	TrainingController_getById: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				id: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetTrainingResponseDto"];
				};
			};
			/** @description Training not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	TrainingController_remove: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["DeleteTrainingResponseDto"];
				};
			};
		};
	};
	UserController_getAll: {
		parameters: {
			query: {
				offset: number;
				limit: number;
				id?: number;
				created_at?: string;
				email?: string;
				name?: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetUserResponseDto"];
				};
			};
			/** @description Invalid param */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	UserController_update: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["PutUserRequestDto"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PutUserResponseDto"];
				};
			};
			/** @description Invalid data */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description User not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	UserController_create: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["PostUserRequestDto"];
			};
		};
		responses: {
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PostUserResponseDto"];
				};
			};
		};
	};
	UserController_getById: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				id: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetUserResponseDto"];
				};
			};
			/** @description User not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	UserController_remove: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["DeleteUserResponseDto"];
				};
			};
		};
	};
	VocabCatalogController_getAll: {
		parameters: {
			query: {
				offset: number;
				limit: number;
				id?: number;
				created_at?: string;
				owner?: number;
				title?: string;
				description?: string | null;
				language?: string;
				image?: string | null;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetVocabCatalogResponseDto"];
				};
			};
			/** @description Invalid param */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	VocabCatalogController_update: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["PutVocabCatalogRequestDto"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PutVocabCatalogResponseDto"];
				};
			};
			/** @description Invalid data */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description VocabCatalog not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	VocabCatalogController_create: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["PostVocabCatalogRequestDto"];
			};
		};
		responses: {
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PostVocabCatalogResponseDto"];
				};
			};
		};
	};
	VocabCatalogController_getById: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				id: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetVocabCatalogResponseDto"];
				};
			};
			/** @description VocabCatalog not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	VocabCatalogController_remove: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				id: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["DeleteVocabCatalogResponseDto"];
				};
			};
		};
	};
	WordController_getAll: {
		parameters: {
			query: {
				offset: number;
				limit: number;
				id?: number;
				created_at?: string;
				topic?: string;
				catalog?: string;
				language?: string;
				topicData?: components["schemas"]["TopicDto"];
				catalogData?: components["schemas"]["VocabCatalogDto"];
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetWordResponseDto"];
				};
			};
			/** @description Invalid param */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	WordController_update: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["PutWordRequestDto"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PutWordResponseDto"];
				};
			};
			/** @description Invalid data */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Word not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	WordController_create: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["PostWordRequestDto"];
			};
		};
		responses: {
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PostWordResponseDto"];
				};
			};
		};
	};
	WordController_getById: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				id: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetWordResponseDto"];
				};
			};
			/** @description Word not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	WordController_remove: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["DeleteWordResponseDto"];
				};
			};
		};
	};
	WordTranslationController_getById: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				id: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["GetWordTranslationResponseDto"];
				};
			};
			/** @description Words translation not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	WordTranslationController_create: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["PostWordTranslationRequestDto"];
			};
		};
		responses: {
			201: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PostWordTranslationResponseDto"];
				};
			};
		};
	};
	AuthController_signin: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["PostSignInRequestDto"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	AuthController_signup: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["PostSignUpRequestDto"];
			};
		};
		responses: {
			201: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	AuthController_sendResetPasswordEmail: {
		parameters: {
			query: {
				email: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	AuthController_resetPassword: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["PutResetPasswordRequestDto"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	AuthController_sendVerificationEmail: {
		parameters: {
			query: {
				/** @description Email verification token */
				token: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	AuthController_refreshToken: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["PostRefreshTokenRequestDto"];
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
}
